<Project Sdk="Microsoft.Build.NoTargets/3.7.0">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <!-- Translate from MSBuild Configurations to Rust Profiles -->
    <NativeBuildProfile Condition="'$(Configuration)'=='Debug'">dev</NativeBuildProfile>
    <NativeBuildProfile Condition="'$(Configuration)'=='Release'">release</NativeBuildProfile>
  </PropertyGroup>

  <PropertyGroup>
    <ModBuildFolder>multiplayer_mvp_client</ModBuildFolder>
    <NativeTargetTriple>i686-pc-windows-gnu</NativeTargetTriple>
    <NativeAssemblyName>multiplayer_mvp_client</NativeAssemblyName>
    <CrossArgs>--profile $(NativeBuildProfile) --target $(NativeTargetTriple) --package $(NativeAssemblyName)</CrossArgs>
  </PropertyGroup>

  <ItemGroup>
    <ModProjectFiles Include="mod/MultiplayerMvpClient/MultiplayerMvpClient.csproj" />
    <ModAssetFiles Include="mod/assets/**/*.*" />
    <!-- The output path for the native assembly must be hardcoded for now, see https://github.com/rust-lang/cargo/issues/6790 -->
    <ModNativeFiles Include="target/$(NativeTargetTriple)/$(Configuration.ToLower())/$(NativeAssemblyName).dll" />
  </ItemGroup>

  <Target Name="RestoreCSharp" BeforeTargets="Restore"> <!-- Restore is ran implicitly by various `dotnet` commands -->
    <MSBuild Projects="@(ModProjectFiles)" Targets="Restore" />
  </Target>

  <Target Name="BuildCSharp">
    <MSBuild Projects="@(ModProjectFiles)" Targets="Build">
      <Output TaskParameter="TargetOutputs" ItemName="ModPluginFiles" />
    </MSBuild>
  </Target>

  <Target Name="CleanCSharp" BeforeTargets="Clean"> <!-- Clean is ran by `dotnet clean` -->
    <MSBuild Projects="@(ModProjectFiles)" Targets="Clean" />
  </Target>

  <Target Name="BuildRust" Outputs="@(ModNativeFiles)">
    <Exec Command="cross build $(CrossArgs)" />
  </Target>

  <Target Name="CleanRust" BeforeTargets="Clean">
    <Exec Command="cross clean $(CrossArgs)" />
  </Target>

  <!--
    Runs on `BeforeTargets="PrepareForRun"` to enable incremental builds, see https://github.com/microsoft/MSBuildSdks/tree/main/src/NoTargets#example 
    The files must be written under $(OutDir) for incremental cleaning to work, as files outside that directory get ignored by the clean
    To understand Inputs, Outputs and FileWrites, read https://github.com/xamarin/xamarin-android/blob/main/Documentation/guides/MSBuildBestPractices.md#incremental-builds
  -->
  <Target Name="BuildModFolder"
      BeforeTargets="PrepareForRun"
      DependsOnTargets="BuildRust;BuildCSharp"
      Inputs="@(ModAssetFiles);@(ModPluginFiles);@(ModNativeFiles)"
      Outputs="@(ModAssetFiles->'$(OutDir)$(ModBuildFolder)/%(RecursiveDir)%(Filename)%(Extension)');@(ModPluginFiles->'$(OutDir)$(ModBuildFolder)/plugins/%(Filename)%(Extension)');@(ModNativeFiles->'$(OutDir)$(ModBuildFolder)/native/%(Filename)%(Extension)')">
    <Copy SourceFiles="@(ModAssetFiles)" DestinationFolder="$(OutDir)$(ModBuildFolder)/%(RecursiveDir)" />
    <Copy SourceFiles="@(ModPluginFiles)" DestinationFolder="$(OutDir)$(ModBuildFolder)/plugins" />
    <Copy SourceFiles="@(ModNativeFiles)" DestinationFolder="$(OutDir)$(ModBuildFolder)/native" />
    <ItemGroup>
      <FileWrites Include="@(ModAssetFiles->'$(OutDir)$(ModBuildFolder)/%(RecursiveDir)%(Filename)%(Extension)');@(ModPluginFiles->'$(OutDir)$(ModBuildFolder)/plugins/%(Filename)%(Extension)');@(ModNativeFiles->'$(OutDir)$(ModBuildFolder)/native/%(Filename)%(Extension)')" />
    </ItemGroup>
  </Target>

</Project>
